1) 방 목록에서 방 이름 하나 클릭해서 입장하기

- 링크 클릭
http://localhost:8080/ws02/chat/room?roomId={roomId}

- stomp.connect({}, onConnect)
미리 정의한 onConnect 함수를 실행하여 서버에 연결을 시도한다

- onConnect()
"/broker/room/{roomId}" 주소를 구독한다 (subscribe)
해당 주소(roomId로 구분됨)에서 발생하는 메세지는 구독자에게 전파된다

"/app/enter/{roomId}" 주소로 메시지를 보낸다
이 주소는 @MessageMapping("/enter/{roomId}") 로 연결된다
메시지의 내용은 자바스크립트객체를 JSON형식 문자열로 변환하여 전송
메시지의 구성은 자바의 MessageDTO와 일치한다
JSON <-> Java Beans(DTO) 변환에 jackson-databind 가 작동

- StompController.enter(MessageDTO)
입장한 사용자의 이름으로 메시지를 작성한다 (채팅방에 입장하였습니다)
from을 "service"로 변경하여 관리메시지로 설정한다 (가운데 정렬)
수정된 메시지 반환 -> 브로커로 전달됨
---------------------------------------------------------
- STOMP 브로커는 roomId를 참조하여, 해당 채널을 구독중인 사용자에게
메시지를 다시 전송한다

- 입장한 사람을 포함하여, 방에 참여한 구독인원에게 메시지가 전달된다
---------------------------------------------------------

- 입장한 사람의 페이지에서 메시지를 받으면 onRecieve(chat) 함수 작동
서버(브로커)가 보낸 JavaBeans -> JSON 문자열을 다시 JS객체로 변환
화면에 출력하기 알맞게 HTML태그, class 등을 지정하여 생성한다
메세지 창에 태그를 넣어주고, 스크롤 높이를 내린다




2) 사용자가 키보드로 메시지를 입력한 후 send버튼 혹은 엔터를 눌렀을 때



3) 사용자가 나가기 버튼을 클릭했을 때













